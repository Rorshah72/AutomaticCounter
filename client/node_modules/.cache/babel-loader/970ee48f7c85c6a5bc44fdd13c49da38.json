{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback } from 'react';\nexport const UseHttp = () => {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const request = useCallback(async (url, method = \"GET\", body = null, headers = {}) => {\n    setLoading(true);\n\n    try {\n      const response = await fetch(url, {\n        method,\n        body,\n        headers\n      });\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.message || 'Сталась помилка');\n      }\n\n      setLoading(false);\n      return data;\n    } catch (e) {\n      setLoading(false);\n      setError(e.message);\n      throw e;\n    }\n  }, []);\n\n  const clearError = () => setError(null);\n\n  return {\n    loading,\n    request,\n    error,\n    clearError\n  };\n};\n\n_s(UseHttp, \"MstwQpYZpw83DP6eQvw4fjC0Jxg=\");\n\n_c = UseHttp;\n\nvar _c;\n\n$RefreshReg$(_c, \"UseHttp\");","map":{"version":3,"sources":["D:/AutomaticCounter/client/src/hooks/http.hook.js"],"names":["useState","useCallback","UseHttp","loading","setLoading","error","setError","request","url","method","body","headers","response","fetch","data","json","ok","Error","message","e","clearError"],"mappings":";;AAAA,SAAQA,QAAR,EAAiBC,WAAjB,QAAmC,OAAnC;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAM;AAAA;;AAC3B,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBJ,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,IAAD,CAAlC;AAEA,QAAMO,OAAO,GAAGN,WAAW,CAAE,OAAOO,GAAP,EAAYC,MAAM,GAAG,KAArB,EAA4BC,IAAI,GAAG,IAAnC,EAAyCC,OAAO,GAAG,EAAnD,KAA0D;AACrFP,IAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,QAAI;AACF,YAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAACL,GAAD,EAAM;AAAEC,QAAAA,MAAF;AAAUC,QAAAA,IAAV;AAAgBC,QAAAA;AAAhB,OAAN,CAA5B;AACA,YAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;;AAEA,UAAG,CAACH,QAAQ,CAACI,EAAb,EAAgB;AACd,cAAM,IAAIC,KAAJ,CAAUH,IAAI,CAACI,OAAL,IAAgB,iBAA1B,CAAN;AACD;;AAEDd,MAAAA,UAAU,CAAC,KAAD,CAAV;AACA,aAAOU,IAAP;AACD,KAVD,CAUE,OAAOK,CAAP,EAAU;AACVf,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,MAAAA,QAAQ,CAACa,CAAC,CAACD,OAAH,CAAR;AACA,YAAMC,CAAN;AACD;AACF,GAjB0B,EAiBxB,EAjBwB,CAA3B;;AAmBA,QAAMC,UAAU,GAAG,MAAMd,QAAQ,CAAC,IAAD,CAAjC;;AAEA,SAAO;AAAEH,IAAAA,OAAF;AAAWI,IAAAA,OAAX;AAAoBF,IAAAA,KAApB;AAA2Be,IAAAA;AAA3B,GAAP;AACD,CA1BM;;GAAMlB,O;;KAAAA,O","sourcesContent":["import {useState,useCallback} from 'react'\r\n\r\nexport const UseHttp = () => {\r\n  const [loading, setLoading] = useState(false)\r\n  const [error, setError] = useState(null)\r\n\r\n  const request = useCallback( async (url, method = \"GET\", body = null, headers = {}) => {\r\n    setLoading(true)\r\n    try {\r\n      const response = await fetch(url, { method, body, headers })\r\n      const data = await response.json()\r\n\r\n      if(!response.ok){\r\n        throw new Error(data.message || 'Сталась помилка')\r\n      }\r\n\r\n      setLoading(false)\r\n      return data\r\n    } catch (e) {\r\n      setLoading(false)\r\n      setError(e.message)\r\n      throw e\r\n    }\r\n  }, [])\r\n\r\n  const clearError = () => setError(null)\r\n\r\n  return { loading, request, error, clearError}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}