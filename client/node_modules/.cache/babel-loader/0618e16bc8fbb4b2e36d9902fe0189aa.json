{"ast":null,"code":"var _jsxFileName = \"D:\\\\AutomaticCounter\\\\client\\\\src\\\\pages\\\\StatsPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext, useCallback, useEffect } from \"react\";\nimport { UseHttp } from \"../hooks/http.hook\";\nimport { AuthContext } from \"../context/AuthContext\";\nimport { useParams } from 'react-router-dom';\nimport { Loader } from \"../components/Loader\";\nimport { StatsList } from \"../components/StatsList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const StatsPage = () => {\n  _s();\n\n  const statsId = useParams().id;\n  const {\n    loading,\n    request\n  } = UseHttp();\n  const {\n    token\n  } = useContext(AuthContext);\n  const [stats, setStats] = useState({\n    indicator: \"\",\n    date: \"\"\n  });\n  const fetchStats = useCallback(async () => {\n    try {\n      const fetched = await request(`/api/stats/${statsId}`, 'GET', null, {\n        Autherization: `Bearer ${token}`\n      });\n      setStats(fetched);\n    } catch (e) {}\n  }, [token, request, statsId]);\n  useEffect(() => {\n    fetchStats();\n  }, [fetchStats]);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: !loading && /*#__PURE__*/_jsxDEV(StatsList, {\n      stats: stats\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 26\n    }, this)\n  }, void 0, false);\n};\n\n_s(StatsPage, \"kRx5t1Ke6IZQ5neZVHEZ+XfPIho=\", false, function () {\n  return [useParams];\n});\n\n_c = StatsPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"StatsPage\");","map":{"version":3,"sources":["D:/AutomaticCounter/client/src/pages/StatsPage.js"],"names":["React","useState","useContext","useCallback","useEffect","UseHttp","AuthContext","useParams","Loader","StatsList","StatsPage","statsId","id","loading","request","token","stats","setStats","indicator","date","fetchStats","fetched","Autherization","e"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,UAAzB,EAAqCC,WAArC,EAAkDC,SAAlD,QAAkE,OAAlE;AACA,SAAQC,OAAR,QAAsB,oBAAtB;AACA,SAAQC,WAAR,QAA0B,wBAA1B;AACA,SAAQC,SAAR,QAAwB,kBAAxB;AACA,SAAQC,MAAR,QAAqB,sBAArB;AACA,SAAQC,SAAR,QAAwB,yBAAxB;;;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAAA;;AAC3B,QAAMC,OAAO,GAAIJ,SAAS,GAAGK,EAA7B;AACA,QAAM;AAACC,IAAAA,OAAD;AAAUC,IAAAA;AAAV,MAAqBT,OAAO,EAAlC;AACA,QAAM;AAACU,IAAAA;AAAD,MAAUb,UAAU,CAACI,WAAD,CAA1B;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBhB,QAAQ,CAAC;AAC/BiB,IAAAA,SAAS,EAAE,EADoB;AAE/BC,IAAAA,IAAI,EAAE;AAFyB,GAAD,CAAlC;AAKA,QAAMC,UAAU,GAAGjB,WAAW,CAAE,YAAY;AACxC,QAAI;AAEA,YAAMkB,OAAO,GAAG,MAAMP,OAAO,CAAE,cAAaH,OAAQ,EAAvB,EAAyB,KAAzB,EAAgC,IAAhC,EACzB;AACIW,QAAAA,aAAa,EAAG,UAASP,KAAM;AADnC,OADyB,CAA7B;AAKAE,MAAAA,QAAQ,CAACI,OAAD,CAAR;AAGH,KAVD,CAUC,OAAOE,CAAP,EAAU,CAAE;AAChB,GAZ6B,EAY5B,CAACR,KAAD,EAAQD,OAAR,EAAiBH,OAAjB,CAZ4B,CAA9B;AAcAP,EAAAA,SAAS,CAAC,MAAM;AACZgB,IAAAA,UAAU;AACb,GAFQ,EAEP,CAACA,UAAD,CAFO,CAAT;;AAKA,MAAGP,OAAH,EAAY;AACR,wBAAO,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AACD,sBACI;AAAA,cACK,CAACA,OAAD,iBAAY,QAAC,SAAD;AAAW,MAAA,KAAK,EAAKG;AAArB;AAAA;AAAA;AAAA;AAAA;AADjB,mBADJ;AAKH,CApCM;;GAAMN,S;UACQH,S;;;KADRG,S","sourcesContent":["import React, {useState, useContext, useCallback, useEffect} from \"react\";\r\nimport {UseHttp} from \"../hooks/http.hook\"\r\nimport {AuthContext} from \"../context/AuthContext\"\r\nimport {useParams} from 'react-router-dom'\r\nimport {Loader} from \"../components/Loader\"\r\nimport {StatsList} from \"../components/StatsList\"\r\n\r\nexport const StatsPage = () => {\r\n    const statsId =  useParams().id\r\n    const {loading, request} = UseHttp()\r\n    const {token} = useContext(AuthContext)\r\n    const [stats, setStats] = useState({\r\n        indicator: \"\",\r\n        date: \"\",        \r\n    })\r\n\r\n    const fetchStats = useCallback( async () => {\r\n        try {\r\n\r\n            const fetched = await request(`/api/stats/${statsId}`,'GET', null,\r\n                {\r\n                    Autherization: `Bearer ${token}`\r\n                })\r\n\r\n            setStats(fetched)\r\n\r\n\r\n        }catch (e) {}\r\n    },[token, request, statsId] )\r\n\r\n    useEffect(() => {\r\n        fetchStats()\r\n    },[fetchStats])\r\n\r\n\r\n    if(loading) {\r\n        return <Loader/>\r\n    }\r\n    return(\r\n        <>\r\n            {!loading && <StatsList stats = { stats }/>}\r\n        </>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}