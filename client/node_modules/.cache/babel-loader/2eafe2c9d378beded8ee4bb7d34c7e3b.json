{"ast":null,"code":"var _jsxFileName = \"D:\\\\AutomaticCounter\\\\client\\\\src\\\\pages\\\\StatsPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext, useCallback, useEffect } from \"react\";\nimport { UserHttp } from \"../hooks/http.hook\";\nimport { AuthContext } from \"../context/AuthContext\";\nimport { Loader } from \"../components/Loader\";\nimport { StatsList } from \"../components/StatsList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const StatsPage = () => {\n  _s();\n\n  const {\n    loading,\n    request\n  } = UserHttp();\n  const {\n    token\n  } = useContext(AuthContext);\n  const [stats, setStats] = useState({\n    indicator: \"\",\n    date: \"\",\n    counter: \"\"\n  });\n  const fetchStats = useCallback(async () => {\n    try {\n      const fetched = await request(`/api/stats/:id`, 'GET', null, {\n        Autherization: `Bearer ${token}`\n      });\n      setStats(fetched);\n    } catch (e) {}\n  }, [token, request]);\n  useEffect(() => {\n    fetchStats();\n  }, [fetchStatss]);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: !loading && /*#__PURE__*/_jsxDEV(StatsList, {\n      stats: stats\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 26\n    }, this)\n  }, void 0, false);\n};\n\n_s(StatsPage, \"ZPBTT1NjuYgLJZLKixReQrKh9OM=\");\n\n_c = StatsPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"StatsPage\");","map":{"version":3,"sources":["D:/AutomaticCounter/client/src/pages/StatsPage.js"],"names":["React","useState","useContext","useCallback","useEffect","UserHttp","AuthContext","Loader","StatsList","StatsPage","loading","request","token","stats","setStats","indicator","date","counter","fetchStats","fetched","Autherization","e","fetchStatss"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,UAAzB,EAAqCC,WAArC,EAAkDC,SAAlD,QAAkE,OAAlE;AACA,SAAQC,QAAR,QAAuB,oBAAvB;AACA,SAAQC,WAAR,QAA0B,wBAA1B;AACA,SAAQC,MAAR,QAAqB,sBAArB;AACA,SAAQC,SAAR,QAAwB,yBAAxB;;;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAAA;;AAC3B,QAAM;AAACC,IAAAA,OAAD;AAAUC,IAAAA;AAAV,MAAqBN,QAAQ,EAAnC;AACA,QAAM;AAACO,IAAAA;AAAD,MAAUV,UAAU,CAACI,WAAD,CAA1B;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAAC;AAC/Bc,IAAAA,SAAS,EAAE,EADoB;AAE/BC,IAAAA,IAAI,EAAE,EAFyB;AAG/BC,IAAAA,OAAO,EAAE;AAHsB,GAAD,CAAlC;AAMA,QAAMC,UAAU,GAAGf,WAAW,CAAE,YAAY;AACxC,QAAI;AACA,YAAMgB,OAAO,GAAG,MAAMR,OAAO,CAAE,gBAAF,EAAkB,KAAlB,EAAyB,IAAzB,EACzB;AACIS,QAAAA,aAAa,EAAG,UAASR,KAAM;AADnC,OADyB,CAA7B;AAKAE,MAAAA,QAAQ,CAACK,OAAD,CAAR;AAGH,KATD,CASC,OAAOE,CAAP,EAAU,CAAE;AAChB,GAX6B,EAW5B,CAACT,KAAD,EAAQD,OAAR,CAX4B,CAA9B;AAaAP,EAAAA,SAAS,CAAC,MAAM;AACZc,IAAAA,UAAU;AACb,GAFQ,EAEP,CAACI,WAAD,CAFO,CAAT;;AAKA,MAAGZ,OAAH,EAAY;AACR,wBAAO,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AACD,sBACI;AAAA,cACK,CAACA,OAAD,iBAAY,QAAC,SAAD;AAAW,MAAA,KAAK,EAAKG;AAArB;AAAA;AAAA;AAAA;AAAA;AADjB,mBADJ;AAKH,CAnCM;;GAAMJ,S;;KAAAA,S","sourcesContent":["import React, {useState, useContext, useCallback, useEffect} from \"react\";\r\nimport {UserHttp} from \"../hooks/http.hook\"\r\nimport {AuthContext} from \"../context/AuthContext\"\r\nimport {Loader} from \"../components/Loader\"\r\nimport {StatsList} from \"../components/StatsList\"\r\n\r\nexport const StatsPage = () => {\r\n    const {loading, request} = UserHttp()\r\n    const {token} = useContext(AuthContext)\r\n    const [stats, setStats] = useState({\r\n        indicator: \"\",\r\n        date: \"\",\r\n        counter: \"\"\r\n    })\r\n\r\n    const fetchStats = useCallback( async () => {\r\n        try {\r\n            const fetched = await request(`/api/stats/:id`,'GET', null,\r\n                {\r\n                    Autherization: `Bearer ${token}`\r\n                })\r\n\r\n            setStats(fetched)\r\n\r\n\r\n        }catch (e) {}\r\n    },[token, request,] )\r\n\r\n    useEffect(() => {\r\n        fetchStats()\r\n    },[fetchStatss])\r\n\r\n\r\n    if(loading) {\r\n        return <Loader/>\r\n    }\r\n    return(\r\n        <>\r\n            {!loading && <StatsList stats = { stats }/>}\r\n        </>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}